c
render
rnder
c
render
c
render
c
@urlc
url
@url
c
render
c
rendered.body
rendered
a
render
c
render
a
c
a
c
a
c
a
c
Url.create(long_url: '#{long_url}')
url 
c
long_url
c
url.save
url
c
url.save
url
c
params
c
@errors.messages
@errors.message
@errors
c
@errors
c
@errors
@url.errors.messages
@url.errors
@url
@dog 
@dog.messages
@dog
c
params
c
invalid_params
c
@url.save
@url
c
Url.find_by(valid_params[:url])
Url.all
c
@url
@url[:long_url] = params[:url][:long_url]
@url[:long_url]
@url
short
c
a.shorten
a = Url.new(long_url: params[:url][:long_url])
Url.new(long_url: params[:url][:long_url])
params
@url
c
params[:url][:long_url]
params[:url]
params["long_url"]
params[:long_url]
params
@url
c
@url
c
params
@url
c
params
c
b.short_url
b = Url.find_by(long_url:'http://www.google.com')
a.short_url
a
a = Url.create(long_url: proper_long_url, short_url: proper_short_url)
Url.create(long_url: proper_long_url, short_url: proper_short_url)
a ac
Url.create(long_url: proper_long_url, short_url: proper_short_url)
validates :long_url, presence: true, :format => {:with => /(^http:\/\/|https:\/\/)/} validates :long_url, presence: true, :format => {:with => /(^http:\/\/|https:\/\/)/} Url.create(long_url: proper_long_url, short_url: proper_short_url)
c
Url.find_by(long_url: proper_long_url)
Url
c
Url.retrieve_short_url(proper_long_url)
Url
proper_long_url
c
cs
c
url
c
url
c
params
valid_params
exit
c
@url.save
exit
@url.errors.full_messages
@url.save
if @url.save
@url
exit
c
exit
@url.errors.full_messages
c
@url.errors.full_messages
c
exit
@url.errors.full_messages
@url
c
exit
c
@url.errors.full_messages
exit
@url.errors.full_messages
@url.save
@url
url_params
params
exit
c
data
c
data
c
line
exit
Url.last
Url.all
data
n
line
data
n
data
line.gsub(/[(,)]/i, '')
line.gsub(/[(,)]/i, '').chomp
line
